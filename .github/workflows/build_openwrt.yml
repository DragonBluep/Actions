name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Choose Build Type'
        required: true
        type: choice
        options:
        - 'Multi targets'
        - 'Multi devices'
      repository:
        description: 'OpenWrt Repository'
        required: true
        type: string
        default: 'DragonBluep/owrt'
      branch:
        description: 'OpenWrt Branch'
        required: true
        type: string
        default: 'dev'
      target:
        description: 'Target'
        required: true
        type: string
        default: '\"ath79/generic\",\"ath79/nand\",\"ramips/mt7620\",\"ramips/mt7621\",\"ramips/mt76x8\"'
      extra_packages:
        description: 'Include Extra Packages'
        required: true
        type: boolean
        default: 'false'

permissions:
  contents: read

jobs:
  determine_targets:
    name: Set targets
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.find_targets.outputs.target }}

    steps:
      - name: Set targets
        id: find_targets
        run: |
          JSON='['${{ inputs.target }}']'

          echo -e "\n---- targets ----\n"
          echo "$JSON"
          echo -e "\n---- targets ----\n"

          echo "target=$JSON" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    needs: determine_targets
    runs-on: ubuntu-latest
    strategy:
       fail-fast: False
       matrix:
         target: ${{fromJson(needs.determine_targets.outputs.target)}}

    permissions:
      contents: read

    steps:
      - name: Checkout directory
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          path: openwrt
          ref: ${{ inputs.branch }}
          token: ${{ secrets.OPENWRT_PAT }}

      - name: Initialization environment
        run: |
          TARGET=$(echo ${{ matrix.target }} | cut -d "/" -f 1)
          SUBTARGET=$(echo ${{ matrix.target }} | cut -d "/" -f 2)
          echo "TARGET=$TARGET" >> "$GITHUB_ENV"
          echo "SUBTARGET=$SUBTARGET" >> "$GITHUB_ENV"

      - name: Install host tools
        run: |
          sudo apt-get update
          sudo apt-get purge -y firefox* google-chrome* microsoft-edge* \
            dotnet* libmono-* temurin-* openjdk-* powershell libllvm* \
            linux-azure* php* snapd aspnetcore-* mysql*
          sudo apt-get install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            python3-distutils rsync unzip zlib1g-dev file wget python2

      - name: Update && Install feeds
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load config template
        working-directory: openwrt
        run: |
          cat ./templates/${{ env.TARGET }}_${{ env.SUBTARGET }}_defconfig > .config

          if [ -e ./templates/packages-default_defconfig ]; then
            cat ./templates/packages-default_defconfig >> .config
          else
            echo 'The default packages template does not exist'
          fi

      - name: Add extra packages
        if:  ${{ inputs.extra_packages }}
        working-directory: openwrt
        run: |
          if [ -e ./templates/packages-extra_defconfig ]; then
            cat ./templates/packages-extra_defconfig >> .config
          else
            echo 'The extra packages template does not exist'
          fi

      - name: Show configuration
        working-directory: openwrt
        run: |
          make defconfig
          ./scripts/diffconfig.sh

      - name: Download packages
        working-directory: openwrt
        run: make download -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      - name: Build tools
        working-directory: openwrt
        run: make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      - name: Build toolchain
        working-directory: openwrt
        run: make toolchain/install -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      - name: Build OpenWrt
        working-directory: openwrt
        run: make -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      - name: Pack target binaries
        if: inputs.build_type == 'Multi targets'
        working-directory: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}
        run: |
          tar -Jcvf  ${{ env.TARGET }}_${{ env.SUBTARGET }}.tar.xz --exclude=packages --exclude=*initramfs*.bin *
          tar -Jcvf  ${{ env.TARGET }}_${{ env.SUBTARGET }}-initramfs.tar.xz *-initramfs-kernel.bin

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}-${{ env.SUBTARGET }}-logs
          path: "openwrt/logs"

      - name: Upload target binaries
        if: inputs.build_type == 'Multi targets'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}_${{ env.SUBTARGET }}
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.TARGET }}_${{ env.SUBTARGET }}.tar.xz

      - name: Upload target initramfs binaries
        if: inputs.build_type == 'Multi targets'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}_${{ env.SUBTARGET }}-initramfs
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.TARGET }}_${{ env.SUBTARGET }}-initramfs.tar.xz

      - name: Upload device binaries
        if: inputs.build_type == 'Multi devices'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}_${{ env.SUBTARGET }}
          path: |
            openwrt/bin/targets/**/**/*
            !openwrt/bin/targets/**/**/packages
